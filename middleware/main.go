package main

import (
	"flag"
	"log"
	"os"
	"sync"
	"time"
)

var (
	// Application config file
	applicationConfigFile = getCurrentWorkingDirectory() + "config.json"
	// Application log file
	applicationLogFile      = getCurrentWorkingDirectory() + "log.txt"
	currentJsonValue        interface{}
	rtspServerStatusChannel = make(map[string]bool)
	debug                   bool
	aws                     bool
	gcp                     bool
	// Values for the aws file path stuff;
	amazonKinesisVideoStreamPath      = "/etc/amazon-kinesis-video-streams-producer-sdk-cpp"
	amazonKinesisVideoStreamBuildPath = amazonKinesisVideoStreamPath + "/build"
	// This is the issue with in google to fix this stuff. /// https://github.com/google/visionai/issues/6
	amazonKinesisDefaultPath = amazonKinesisVideoStreamBuildPath + "/libgstkvssink.so"
	amazonKinesisTempPath    = amazonKinesisDefaultPath + ".tmp"
)

// The config file struct for the application to use.
type AutoGenerated struct {
	Num0 HostStruct `json:"0"`
	Num1 HostStruct `json:"1"`
	Num2 HostStruct `json:"2"`
	Num3 HostStruct `json:"3"`
	Num4 HostStruct `json:"4"`
	Num5 HostStruct `json:"5"`
}

type HostStruct struct {
	Host                      string                    `json:"host"`
	AmazonKinesisVideoStreams AmazonKinesisVideoStreams `json:"amazon_kinesis_video_streams"`
	GoogleCloudVertexAiVision GoogleCloudVertexAiVision `json:"google_cloud_vertex_ai_vision"`
}

type AmazonKinesisVideoStreams struct {
	DefaultRegion string `json:"default_region"`
	KinesisStream string `json:"kinesis_stream"`
}

type GoogleCloudVertexAiVision struct {
	ProjectName          string `json:"project_name"`
	DefaultRegion        string `json:"default_region"`
	VertexAiVisionStream string `json:"vertex_ai_vision_stream"`
}

func init() {
	// Validate the operating system
	lockdownToLinuxOperatingSystem()
	// Check if there are any user provided flags in the request.
	if len(os.Args) > 1 {
		// Check if the config path is provided.
		tempConfig := flag.String("config", "config.json", "The location of the config file.")
		tempLog := flag.String("log", "log.txt", "The location of the log file.")
		tempDebug := flag.Bool("debug", false, "Determine if this is a debug run.")
		tempAWS := flag.Bool("aws", false, "Determine if this is a AWS run.")
		tempGCP := flag.Bool("gcp", false, "Determine if this is a GCP run.")
		flag.Parse()
		applicationConfigFile = *tempConfig
		applicationLogFile = *tempLog
		debug = *tempDebug
		aws = *tempAWS
		gcp = *tempGCP
	} else {
		// if there are no flags provided than we close the application.
		log.Fatalln("Error: No flags provided. Please use -help for more information.")
	}
	// Both AWS and GCP can't be true at the same time.
	if aws && gcp {
		saveAllErrors("Error: Both AWS and GCP can't be true at the same time.")
	}
	if !aws && !gcp {
		saveAllErrors("Error: Both AWS and GCP can't be false at the same time.")
	}
	// Check if the system has the required tools and is installed in path.
	requiredApplications := []string{
		"vaictl",
		"gst-launch-1.0",
		"ffmpeg",
		"aws",
		"gcloud",
	}
	// Check if the required application are present in the system
	for _, app := range requiredApplications {
		if !commandExists(app) {
			saveAllErrors("Error: " + app + "is not installed in your system, Please install it and try again.")
		}
	}
	// Check the directory structure for the application
	// Check if the amazon-kinesis-video-streams-producer-sdk-cpp is present in the system
	if !directoryExists(amazonKinesisVideoStreamPath) {
		saveAllErrors("Error: The amazon-kinesis-video-streams-producer-sdk-cpp is not present in the system.")
	}
	// Check if the amazon-kinesis-video-streams-producer-sdk-cpp/build is present in the system
	if !directoryExists(amazonKinesisVideoStreamBuildPath) {
		saveAllErrors("Error: The amazon-kinesis-video-streams-producer-sdk-cpp/build is not present in the system.")
	}
	// Check if the amazon-kinesis-video-streams-producer-sdk-cpp/build/libgstkvssink.so is present in the system
	if !fileExists(amazonKinesisDefaultPath) && !fileExists(amazonKinesisTempPath) {
		saveAllErrors("Error: The amazon-kinesis-video-streams-producer-sdk-cpp/build/libgstkvssink.so is not present in the system.")
	}
	// Check if the config file exists in the current directory
	if !fileExists(applicationConfigFile) {
		// Write a config file in the current directory if it doesn't exist
		writeToFile(applicationConfigFile, []byte(encodeStructToJSON(AutoGenerated{})))
		// Exit the application since the config file was written just now and content will not be in that file.
		saveAllErrors("Error: Just created the default configuration; please edit the configuration and launch the program again.")
	}
	// Check if the file provided has a valid .json extension.
	if getFileExtension(applicationConfigFile) != ".json" {
		saveAllErrors("Error: The extension of the config file isn't valid.")
	}
	// DEBUG: Print the Hash of the file to change it below.
	// log.Println(sha256OfFile(applicationConfigFile))
	// Hash the file and get the SHA-256 and make sure its not the deafult config.
	if sha256OfFile(applicationConfigFile) == "273dfdef0f9b697b5b76f23e23e17563c9ab56eff100093b5ac1ef411546da15e19c0aae8153c64691a4a86b5db2465bebd6943b863531149b4995a3f55ba0ad" {
		// The file has not been modified
		saveAllErrors("Error: The config file has not been modified, Please modify it and try again.")
	}
	// Check if the config has the correct format and all the info is correct.
	if !jsonValid(readFileAndReturnAsBytes(applicationConfigFile)) {
		saveAllErrors("Error: The config file is not a valid json file.")
	}
	// Read the config file and store it in a variable
	currentJsonValue = unmarshalJSONIntoStruct([]byte(readFileAndReturnAsBytes(applicationConfigFile)), &AutoGenerated{})
	log.Println(currentJsonValue)

	// Validate the first level of the config file
	// Validate the length of the config file
	validateJSONLength("Host", currentJsonValue.(*AutoGenerated).Num0.Host)
	validateJSONLength("DefaultRegion", currentJsonValue.(*AutoGenerated).Num0.AmazonKinesisVideoStreams.DefaultRegion)
	validateJSONLength("KinesisStream", currentJsonValue.(*AutoGenerated).Num0.AmazonKinesisVideoStreams.KinesisStream)
	validateJSONLength("ProjectName", currentJsonValue.(*AutoGenerated).Num0.GoogleCloudVertexAiVision.ProjectName)
	validateJSONLength("DefaultRegion", currentJsonValue.(*AutoGenerated).Num0.GoogleCloudVertexAiVision.DefaultRegion)
	validateJSONLength("VertexAiVisionStream", currentJsonValue.(*AutoGenerated).Num0.GoogleCloudVertexAiVision.VertexAiVisionStream)
	// Validate the second level of the config file
	validateJSONLength("AccessKey", currentJsonValue.(*AutoGenerated).Num1.Host)
	validateJSONLength("SecretKey", currentJsonValue.(*AutoGenerated).Num1.AmazonKinesisVideoStreams.DefaultRegion)
	validateJSONLength("KinesisStream", currentJsonValue.(*AutoGenerated).Num1.AmazonKinesisVideoStreams.KinesisStream)
	validateJSONLength("ProjectName", currentJsonValue.(*AutoGenerated).Num1.GoogleCloudVertexAiVision.ProjectName)
	validateJSONLength("DefaultRegion", currentJsonValue.(*AutoGenerated).Num1.GoogleCloudVertexAiVision.DefaultRegion)
	validateJSONLength("VertexAiVisionStream", currentJsonValue.(*AutoGenerated).Num1.GoogleCloudVertexAiVision.VertexAiVisionStream)
	// Validate the third level of the config file
	validateJSONLength("AccessKey", currentJsonValue.(*AutoGenerated).Num2.Host)
	validateJSONLength("SecretKey", currentJsonValue.(*AutoGenerated).Num2.AmazonKinesisVideoStreams.DefaultRegion)
	validateJSONLength("KinesisStream", currentJsonValue.(*AutoGenerated).Num2.AmazonKinesisVideoStreams.KinesisStream)
	validateJSONLength("ProjectName", currentJsonValue.(*AutoGenerated).Num2.GoogleCloudVertexAiVision.ProjectName)
	validateJSONLength("DefaultRegion", currentJsonValue.(*AutoGenerated).Num2.GoogleCloudVertexAiVision.DefaultRegion)
	validateJSONLength("VertexAiVisionStream", currentJsonValue.(*AutoGenerated).Num2.GoogleCloudVertexAiVision.VertexAiVisionStream)
	// Validate the fourth level of the config file
	validateJSONLength("AccessKey", currentJsonValue.(*AutoGenerated).Num3.Host)
	validateJSONLength("SecretKey", currentJsonValue.(*AutoGenerated).Num3.AmazonKinesisVideoStreams.DefaultRegion)
	validateJSONLength("KinesisStream", currentJsonValue.(*AutoGenerated).Num3.AmazonKinesisVideoStreams.KinesisStream)
	validateJSONLength("ProjectName", currentJsonValue.(*AutoGenerated).Num3.GoogleCloudVertexAiVision.ProjectName)
	validateJSONLength("DefaultRegion", currentJsonValue.(*AutoGenerated).Num3.GoogleCloudVertexAiVision.DefaultRegion)
	validateJSONLength("VertexAiVisionStream", currentJsonValue.(*AutoGenerated).Num3.GoogleCloudVertexAiVision.VertexAiVisionStream)
	// Validate the fifth level of the config file
	validateJSONLength("AccessKey", currentJsonValue.(*AutoGenerated).Num4.Host)
	validateJSONLength("SecretKey", currentJsonValue.(*AutoGenerated).Num4.AmazonKinesisVideoStreams.DefaultRegion)
	validateJSONLength("KinesisStream", currentJsonValue.(*AutoGenerated).Num4.AmazonKinesisVideoStreams.KinesisStream)
	validateJSONLength("ProjectName", currentJsonValue.(*AutoGenerated).Num4.GoogleCloudVertexAiVision.ProjectName)
	validateJSONLength("DefaultRegion", currentJsonValue.(*AutoGenerated).Num4.GoogleCloudVertexAiVision.DefaultRegion)
	validateJSONLength("VertexAiVisionStream", currentJsonValue.(*AutoGenerated).Num4.GoogleCloudVertexAiVision.VertexAiVisionStream)
	// Validate the sixth level of the config file
	validateJSONLength("AccessKey", currentJsonValue.(*AutoGenerated).Num5.Host)
	validateJSONLength("SecretKey", currentJsonValue.(*AutoGenerated).Num5.AmazonKinesisVideoStreams.DefaultRegion)
	validateJSONLength("KinesisStream", currentJsonValue.(*AutoGenerated).Num5.AmazonKinesisVideoStreams.KinesisStream)
	validateJSONLength("ProjectName", currentJsonValue.(*AutoGenerated).Num5.GoogleCloudVertexAiVision.ProjectName)
	validateJSONLength("DefaultRegion", currentJsonValue.(*AutoGenerated).Num5.GoogleCloudVertexAiVision.DefaultRegion)
	validateJSONLength("VertexAiVisionStream", currentJsonValue.(*AutoGenerated).Num5.GoogleCloudVertexAiVision.VertexAiVisionStream)
	// Note: This is a temp location for this and other location will be better for this.
	go checkConfigChanges()
	// Validate the content of the config file (API Keys, etc.)

	// Check if the rtsp server is alive and responding to requests
	go checkRTSPServerAliveInBackground(currentJsonValue.(*AutoGenerated).Num0.Host)
	go checkRTSPServerAliveInBackground(currentJsonValue.(*AutoGenerated).Num1.Host)
	go checkRTSPServerAliveInBackground(currentJsonValue.(*AutoGenerated).Num2.Host)
	go checkRTSPServerAliveInBackground(currentJsonValue.(*AutoGenerated).Num3.Host)
	go checkRTSPServerAliveInBackground(currentJsonValue.(*AutoGenerated).Num4.Host)
	go checkRTSPServerAliveInBackground(currentJsonValue.(*AutoGenerated).Num5.Host)
}

func main() {
	// Get the AWS Credentials
	accessKey, secretKey := parseAWSCredentialsFile()
	// Create a wait group for the upload
	var uploadWaitGroup sync.WaitGroup
	// Create a counter map for the RTSP Server
	var rtspServerRunCounter = make(map[string]int)
	// RTSP Server Counter Map.
	for {
		// Server 0
		if rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num0.Host] == 0 {
			// Add 1 to the counter
			rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num0.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num0.Host] + 1
			// Check if the RTSP Server is alive
			if getValueFromMap(rtspServerStatusChannel, currentJsonValue.(*AutoGenerated).Num0.Host) {
				// Add a 1 to the wait group
				uploadWaitGroup.Add(1)
				// Check if we are uploading to AWS
				if aws {
					// Upload the feed into AWS Kinesis Video Streams
					go runGstPipeline(currentJsonValue.(*AutoGenerated).Num0.Host, currentJsonValue.(*AutoGenerated).Num0.AmazonKinesisVideoStreams.KinesisStream, accessKey, secretKey, currentJsonValue.(*AutoGenerated).Num0.AmazonKinesisVideoStreams.DefaultRegion, &uploadWaitGroup)
				} else if gcp {
					// Upload the feed into Google cloud vertex AI
					go forwardDataToGoogleCloudVertexAI(currentJsonValue.(*AutoGenerated).Num0.Host, currentJsonValue.(*AutoGenerated).Num0.GoogleCloudVertexAiVision.ProjectName, currentJsonValue.(*AutoGenerated).Num0.GoogleCloudVertexAiVision.DefaultRegion, currentJsonValue.(*AutoGenerated).Num0.GoogleCloudVertexAiVision.VertexAiVisionStream, &uploadWaitGroup)
				}
				// Remove the 1 from the counter
				rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num0.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num0.Host] - 1
			}
		}
		// Server 1
		if rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num1.Host] == 0 {
			// Add 1 to the counter
			rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num1.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num1.Host] + 1
			// Check if the RTSP Server is alive
			if getValueFromMap(rtspServerStatusChannel, currentJsonValue.(*AutoGenerated).Num1.Host) {
				// Add a 1 to the wait group
				uploadWaitGroup.Add(1)
				// Check if we are uploading to AWS
				if aws {
					// Upload the feed into AWS Kinesis Video Streams
					go runGstPipeline(currentJsonValue.(*AutoGenerated).Num1.Host, currentJsonValue.(*AutoGenerated).Num1.AmazonKinesisVideoStreams.KinesisStream, accessKey, secretKey, currentJsonValue.(*AutoGenerated).Num1.AmazonKinesisVideoStreams.DefaultRegion, &uploadWaitGroup)
				} else if gcp {
					// Upload the feed into Google cloud vertex AI
					go forwardDataToGoogleCloudVertexAI(currentJsonValue.(*AutoGenerated).Num1.Host, currentJsonValue.(*AutoGenerated).Num1.GoogleCloudVertexAiVision.ProjectName, currentJsonValue.(*AutoGenerated).Num1.GoogleCloudVertexAiVision.DefaultRegion, currentJsonValue.(*AutoGenerated).Num1.GoogleCloudVertexAiVision.VertexAiVisionStream, &uploadWaitGroup)
				}
				// Remove the 1 from the counter
				rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num1.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num1.Host] - 1
			}
		}
		// Server 2
		if rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num2.Host] == 0 {
			// Add 1 to the counter
			rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num2.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num2.Host] + 1
			// Check if the RTSP Server is alive
			if getValueFromMap(rtspServerStatusChannel, currentJsonValue.(*AutoGenerated).Num2.Host) {
				// Add a 1 to the wait group
				uploadWaitGroup.Add(1)
				// Check if we are uploading to AWS
				if aws {
					// Upload the feed into AWS Kinesis Video Streams
					go runGstPipeline(currentJsonValue.(*AutoGenerated).Num2.Host, currentJsonValue.(*AutoGenerated).Num2.AmazonKinesisVideoStreams.KinesisStream, accessKey, secretKey, currentJsonValue.(*AutoGenerated).Num2.AmazonKinesisVideoStreams.DefaultRegion, &uploadWaitGroup)
				} else if gcp {
					// Upload the feed into Google cloud vertex AI
					go forwardDataToGoogleCloudVertexAI(currentJsonValue.(*AutoGenerated).Num2.Host, currentJsonValue.(*AutoGenerated).Num2.GoogleCloudVertexAiVision.ProjectName, currentJsonValue.(*AutoGenerated).Num2.GoogleCloudVertexAiVision.DefaultRegion, currentJsonValue.(*AutoGenerated).Num2.GoogleCloudVertexAiVision.VertexAiVisionStream, &uploadWaitGroup)
				}
				// Remove the 1 from the counter
				rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num2.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num2.Host] - 1
			}
		}
		// Server 3
		if rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num3.Host] == 0 {
			// Add 1 to the counter
			rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num3.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num3.Host] + 1
			// Check if the RTSP Server is alive
			if getValueFromMap(rtspServerStatusChannel, currentJsonValue.(*AutoGenerated).Num3.Host) {
				// Add a 1 to the wait group
				uploadWaitGroup.Add(1)
				// Check if we are uploading to AWS
				if aws {
					// Upload the feed into AWS Kinesis Video Streams
					go runGstPipeline(currentJsonValue.(*AutoGenerated).Num3.Host, currentJsonValue.(*AutoGenerated).Num3.AmazonKinesisVideoStreams.KinesisStream, accessKey, secretKey, currentJsonValue.(*AutoGenerated).Num3.AmazonKinesisVideoStreams.DefaultRegion, &uploadWaitGroup)
				} else if gcp {
					// Upload the feed into Google cloud vertex AI
					go forwardDataToGoogleCloudVertexAI(currentJsonValue.(*AutoGenerated).Num3.Host, currentJsonValue.(*AutoGenerated).Num3.GoogleCloudVertexAiVision.ProjectName, currentJsonValue.(*AutoGenerated).Num3.GoogleCloudVertexAiVision.DefaultRegion, currentJsonValue.(*AutoGenerated).Num3.GoogleCloudVertexAiVision.VertexAiVisionStream, &uploadWaitGroup)
				}
				// Remove the 1 from the counter
				rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num3.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num3.Host] - 1
			}
		}
		// Server 4
		if rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num4.Host] == 0 {
			// Add 1 to the counter
			rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num4.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num4.Host] + 1
			// Check if the RTSP Server is alive
			if getValueFromMap(rtspServerStatusChannel, currentJsonValue.(*AutoGenerated).Num4.Host) {
				// Add a 1 to the wait group
				uploadWaitGroup.Add(1)
				// Check if we are uploading to AWS
				if aws {
					// Upload the feed into AWS Kinesis Video Streams
					go runGstPipeline(currentJsonValue.(*AutoGenerated).Num4.Host, currentJsonValue.(*AutoGenerated).Num4.AmazonKinesisVideoStreams.KinesisStream, accessKey, secretKey, currentJsonValue.(*AutoGenerated).Num4.AmazonKinesisVideoStreams.DefaultRegion, &uploadWaitGroup)
				} else if gcp {
					// Upload the feed into Google cloud vertex AI
					go forwardDataToGoogleCloudVertexAI(currentJsonValue.(*AutoGenerated).Num4.Host, currentJsonValue.(*AutoGenerated).Num4.GoogleCloudVertexAiVision.ProjectName, currentJsonValue.(*AutoGenerated).Num4.GoogleCloudVertexAiVision.DefaultRegion, currentJsonValue.(*AutoGenerated).Num4.GoogleCloudVertexAiVision.VertexAiVisionStream, &uploadWaitGroup)
				}
				// Remove the 1 from the counter
				rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num4.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num4.Host] - 1
			}
		}
		// Server 5
		if rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num5.Host] == 0 {
			// Add 1 to the counter
			rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num5.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num5.Host] + 1
			// Check if the RTSP Server is alive
			if getValueFromMap(rtspServerStatusChannel, currentJsonValue.(*AutoGenerated).Num5.Host) {
				// Add a 1 to the wait group
				uploadWaitGroup.Add(1)
				// Check if we are uploading to AWS
				if aws {
					// Upload the feed into AWS Kinesis Video Streams
					go runGstPipeline(currentJsonValue.(*AutoGenerated).Num5.Host, currentJsonValue.(*AutoGenerated).Num5.AmazonKinesisVideoStreams.KinesisStream, accessKey, secretKey, currentJsonValue.(*AutoGenerated).Num5.AmazonKinesisVideoStreams.DefaultRegion, &uploadWaitGroup)
				} else if gcp {
					// Upload the feed into Google cloud vertex AI
					go forwardDataToGoogleCloudVertexAI(currentJsonValue.(*AutoGenerated).Num5.Host, currentJsonValue.(*AutoGenerated).Num5.GoogleCloudVertexAiVision.ProjectName, currentJsonValue.(*AutoGenerated).Num5.GoogleCloudVertexAiVision.DefaultRegion, currentJsonValue.(*AutoGenerated).Num5.GoogleCloudVertexAiVision.VertexAiVisionStream, &uploadWaitGroup)
				}
				// Remove the 1 from the counter
				rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num5.Host] = rtspServerRunCounter[currentJsonValue.(*AutoGenerated).Num5.Host] - 1
			}
		}
		// Wait for the wait group to finish
		uploadWaitGroup.Wait()
		// Sleep for 30 second
		time.Sleep(30 * time.Second)
		// End if debug
		if debug {
			break
		}
	}
}
